/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l4xx_hal.h"

I2C_HandleTypeDef oledI2c;

UART_HandleTypeDef huart2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C3_Init(void);
void OLED_Init();

int main(void)
{
  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C3_Init();

  OLED_Init();

  while (1)
  {

  }

}



void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

static void MX_I2C3_Init(void)
{
	oledI2c.Instance = I2C3;
	oledI2c.Init.Timing = 0x00000E14;
	oledI2c.Init.OwnAddress1 = 0;
	oledI2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	oledI2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	oledI2c.Init.OwnAddress2 = 0;
	oledI2c.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
	oledI2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	oledI2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&oledI2c) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&oledI2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&oledI2c , 0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_I2C_Init(&oledI2c);

}

static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

}

void OLED_Init() {
	HAL_Delay(100);
	HAL_I2C_Master_Transmit(&oledI2c, *0x78, 0x20, 1, 100); //Set Memory Addressing Mode
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x10, 1, 100); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xB0, 1, 100); //Set Page Start Address for Page Addressing Mode,0-7
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xC8, 1, 100); //Set COM Output Scan Direction
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x00, 1, 100); //---set low column address
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x10, 1, 100); //---set high column address
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x40, 1, 100); //--set start line address
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x81, 1, 100); //--set contrast control register
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xFF, 1, 100);
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xA1, 1, 100); //--set segment re-map 0 to 127
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xA6, 1, 100); //--set normal display
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xA8, 1, 100); //--set multiplex ratio(1 to 64)
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x3F, 1, 100); //
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xA4, 1, 100); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xD3, 1, 100); //-set display offset
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x00, 1, 100); //-not offset
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xD5, 1, 100); //--set display clock divide ratio/oscillator frequency
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xF0, 1, 100); //--set divide ratio
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xD9, 1, 100); //--set pre-charge period
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x22, 1, 100); //
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xDA, 1, 100); //--set com pins hardware configuration
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x12, 1, 100);
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xDB, 1, 100); //--set vcomh
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x20, 1, 100); //0x20,0.77xVcc
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x8D, 1, 100); //--set DC-DC enable
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0x14, 1, 100); //
	HAL_I2C_Master_Transmit(&oledI2c, 0x78, 0xAF, 1, 100); //--turn on SSD1306 panel
}

void _Error_Handler(char * file, int line)
{
  while(1) 
  {
  }
}

#ifdef USE_FULL_ASSERT

void assert_failed(uint8_t* file, uint32_t line)
{

}

#endif
